version: 2.1

commands:
  build_file:
    description: "Build files"
    steps:
      - run: 
          name: Yarn install, build, and test
          command: |
            yarn install
            yarn build
            yarn test
      - run:
          name: "Run  Coverage Reports"
          command: |
            npm test -- --coverage --watchAll=false --collectCoverageFrom=src/**/*js
      - run:
          name: "Run Sonarqube scanner"
          command: |
            export SCAN_VERSION=4.3.0.2102-linux
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SCAN_VERSION}.zip 
            unzip sonar-scanner-cli-${SCAN_VERSION}.zip 
            ./sonar-scanner-${SCAN_VERSION}/bin/sonar-scanner \
             -Dsonar.projectKey=gitwize-fe \
             -Dsonar.sources=. \
             -Dsonar.host.url=https://sunfyre.wizeline.com \
             -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
             -Dsonar.login=${SONARQUBE_TOKEN}

  deploy_build:
    parameters:
      environment:
        type: string
    steps:
      - run:
          name: Build Package 
          command: |
            export BUILD_INFO=build-info.txt
            echo "${CIRCLE_BUILD_NUM}" >> $BUILD_INFO  
            echo "${CIRCLE_SHA1}"      >> $BUILD_INFO 
            echo "$(date -u)"          >> $BUILD_INFO
            echo ${CIRCLE_TAG}
            yarn install
            yarn build
            cp -f $BUILD_INFO build/$BUILD_INFO
      - run:
          name: Deploy to CloudFront
          command: |
            export ENVIRONMENT=<< parameters.environment >>
            echo " ${ENVIRONMENT} test " > out.txt
            cat out.txt
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            if [[ ${REACT_APP_OKTA_CLIENT_ID} == '0oaelas08JLcedPXB4x6' ]]; then
               echo "deploy to QA!!!!!!"
            fi
            #aws s3 sync --acl bucket-owner-full-control build ${S3} --delete --region ${AWS_REGION} 
            #aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"

jobs:
  build:
    docker: 
      - image: circleci/node:lts # the primary container, where your job's commands are run
    steps:
      - checkout # check out the code in the project directory
      - build_file
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}' 
  deploy:
    docker: 
      - image: circleci/node:lts # the primary container, where your job's commands are run
    steps:
      - checkout # check out the code in the project directory
      - deploy_build:
          environment: DEV
      - run:
          name: Deploy to DEV
          command: |
            export S3=${DEV_S3}
            export CLOUDFRONT_ID=${DEV_CLOUDFRONT_ID}
            export AWS_REGION=${DEV_AWS_REGION}

      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}' 
  deploy-qa:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          name: Deploy to QA
          command: |
              export REACT_APP_BASE_URL=${QA_REACT_APP_BASE_URL}
              export REACT_APP_API_URL=${QA_REACT_APP_API_URL}
              export REACT_APP_OKTA_CLIENT_ID=${QA_REACT_APP_OKTA_CLIENT_ID}    
              export REACT_APP_OKTA_ISSUER=${QA_REACT_APP_OKTA_ISSUER}
              export REACT_APP_OKTA_DISABLE_HTTPS_CHECK=${QA_REACT_APP_OKTA_DISABLE_HTTPS_CHECK}
              export S3=${QA_S3}
              export CLOUDFRONT_ID=${QA_CLOUDFRONT_ID}
              export AWS_REGION=${QA_AWS_REGION}
      - deploy_build:
          environment: QA
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: "Run automation test"
          command: |
            sudo apt update
            sudo apt install --yes software-properties-common
            sudo add-apt-repository --yes ppa:deadsnakes/ppa
            sudo apt install --yes python3.8
            cd ./automation/pytest
            pip install -r requirement.txt
            pytest -s test_selenium.py
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}' 
  deploy-prod:
    docker:
      - image: circleci/node:lts 
    steps:
      - checkout 
      - run:
          name: Deploy to PROD
          command: |
              export REACT_APP_BASE_URL=${PROD_REACT_APP_BASE_URL}
              export REACT_APP_API_URL=${PROD_REACT_APP_API_URL}
              export REACT_APP_OKTA_CLIENT_ID=${PROD_REACT_APP_OKTA_CLIENT_ID}    
              export REACT_APP_OKTA_ISSUER=${PROD_REACT_APP_OKTA_ISSUER}
              export REACT_APP_OKTA_DISABLE_HTTPS_CHECK=${PROD_REACT_APP_OKTA_DISABLE_HTTPS_CHECK}
              export S3=${PROD_S3}
              export CLOUDFRONT_ID=${PROD_CLOUDFRONT_ID}
              export AWS_REGION=${PROD_AWS_REGION}
      - deploy_build:
          environment: PROD
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'

orbs:
  slack: circleci/slack@3.4.2
  browser-tools: circleci/browser-tools@1.0.1
  python: circleci/python@0.3.0

workflows:
  ci-workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - master
                - /deploy-.*/
      - deploy-qa:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+).*/
      - approval-deploy-prod: 
          type: approval 
      - deploy-prod:
          requires:
            - approval-deploy-prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+).*/
